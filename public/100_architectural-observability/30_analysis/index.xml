<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Analysis on English</title>
    <link>/100_architectural-observability/30_analysis.html</link>
    <description>Recent content in Analysis on English</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/100_architectural-observability/30_analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Importing measurements</title>
      <link>/100_architectural-observability/30_analysis/1_import_baseline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/1_import_baseline.html</guid>
      <description>Importing the starting point measurement Every measurement may have different results following the Learning Phase, depending on the flows covered in the original application. Since this is a step-by-step tutorial, it is recommended to start by importing the measurement used for the analysis steps in this tutorial.
Go to the vFunction Server Web UI
Switch to the Analysis page
Click MEASUREMENTS (bottom of the pane), select IMPORT MEASUREMENT and then CHOOSE FILE in the popup dialog</description>
    </item>
    
    <item>
      <title>Analysis page walkthrough</title>
      <link>/100_architectural-observability/30_analysis/2_analysis_page.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/2_analysis_page.html</guid>
      <description>Analysis page walkthrough Let&amp;rsquo;s walk through the analysis page and understand the basics.
The center pane shows spheres representing the domains. The sphere&amp;rsquo;s size is proportional to the number of classes it includes. The color represents its exclusivity – the percentage of classes that are only used by the domain itself (exclusive to the domain). We will elaborate more on exclusivity later. The dashed arrows between spheres represent calls across domains.</description>
    </item>
    
    <item>
      <title>Reviewing the OMS Jars</title>
      <link>/100_architectural-observability/30_analysis/2.1-oms_jars.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/2.1-oms_jars.html</guid>
      <description>The OMS Jars You can view the various jar files of your application and their inter dependencies in vFunction. This allows you to determine if some of the jars of your application should be marked as infra jars.
An infra jar is jar library which is part of the current application that will continue to be used as a library in the new architecture by the domains. Marking a jar as infra reduces the scope of the analysis and will result in dependencies from the domains build files to infra jars that are required by each of the domains.</description>
    </item>
    
    <item>
      <title>Order Controller</title>
      <link>/100_architectural-observability/30_analysis/3_order_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/3_order_controller.html</guid>
      <description>Order Controller In this section, we will focus on the OrderController domain:
Click on the OrderController domain on the right pane. The names of the domains are derived from the classes that own the end points through which clients access the domain. These endpoints are called entry points.
The domain has three entry points. To review them, click EXPLORE TREE next to the Entry Points of the OrderController domain. On the left pane, you see the three endpoints.</description>
    </item>
    
    <item>
      <title>Inventory Controller</title>
      <link>/100_architectural-observability/30_analysis/4_inventory_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/4_inventory_controller.html</guid>
      <description>Inventory Controller Moving on to the InventoryController domain
In the domains view of the analysis page, locate and open InventoryController
Click VIEW next to Dynamic classes to review the dynamic analysis results. There are two exclusive classes and one non-exclusive class (InventoryService)
Click on Details of the non-exclusive InventoryService class. You can see that ProductController is also using it.
Scroll down in the Details popup and click on ProductService.getProductInventory(), the call tree will open as shown as below:</description>
    </item>
    
    <item>
      <title>Product Controller</title>
      <link>/100_architectural-observability/30_analysis/5_product_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/5_product_controller.html</guid>
      <description>Product Controller Select the ProductController domain; notice that its sphere has an arrow pointing to the InventoryController domain because of the entry point we added in the previous section. Hovering over that line shows the method we marked as the new entry point. The Dynamic exclusivity of ProductController is already 100%.
Let’s view the static analysis result as we did before. The two non-exclusive classes are ShippingRepository and ShippingService.</description>
    </item>
    
    <item>
      <title>Payment Domains</title>
      <link>/100_architectural-observability/30_analysis/6_payment_services.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/6_payment_services.html</guid>
      <description>Payment Domains Locate the two payment domains: PaymentService and DinersPaymentService. Looking at the spheres in the center pane, they are both being used by ModifyFulfillmentController.
Both domains have 50% exclusivity and consist of two classes. The non-exclusive class, AbstractPaymentHttpClient, is shared by both (select one of the domains, click on VIEW next to Dynamic classes, go to the Non-exclusive class, and click Details to see the services that are using it)</description>
    </item>
    
    <item>
      <title>Other Services</title>
      <link>/100_architectural-observability/30_analysis/7_shipping_price_modify_fulfillment_controllers.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/7_shipping_price_modify_fulfillment_controllers.html</guid>
      <description>Shipping Price Controller and Modifying Fulfillment Controller Select the ShippingPriceController domain – its dynamic class exclusivity is 50%
View the dynamic classes, the ShippingService is the non-exclusive class.
Click DETAILS to see what other services use this class (ShippingService) – it is also used by ModifyFulfillmentOrder.
In the pop-up, click on ModifyFulfillmentService.getShippingAmout() and move up the call tree to see the call tree as shown here:
Modify Fulfillment Calltree Make ShippingService$$EnhancerBySpringCGLIB.</description>
    </item>
    
    <item>
      <title>&#34;main&#34; measrement</title>
      <link>/100_architectural-observability/30_analysis/8_setting_main_measurement.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/8_setting_main_measurement.html</guid>
      <description>Setting the measurement as &amp;ldquo;main&amp;rdquo; In the Analysis page, click MEASUREMENTS at the bottom and then click SELECT MEASUREMENT. You should see the list of measurements similar to the figure below
Click on the Star inside the circle (left to the measurement name) to indicate that the current measurement is &amp;ldquo;main&amp;rdquo;. This tagging is useful when working with multiple measurements.
Click outside the measurement list to close it
Hover over the name of the measurement (top left of the page) and click the pencil icon</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>/100_architectural-observability/30_analysis/9_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/100_architectural-observability/30_analysis/9_summary.html</guid>
      <description>Summary We walked through the analysis flows to partition an application into domains, by configuring entry points, merging domains, setting classes as common/non-common/dead-code, and more.
In the next part we will see how to setup detect and handle architectural drifts as changes are introduced to the application.</description>
    </item>
    
  </channel>
</rss>
