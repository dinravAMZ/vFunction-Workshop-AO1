<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Creation on English</title>
    <link>/200_refactoring-engine/210_servicecreation.html</link>
    <description>Recent content in Service Creation on English</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="/200_refactoring-engine/210_servicecreation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dev VM Content</title>
      <link>/200_refactoring-engine/210_servicecreation/1_dev_vm.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/1_dev_vm.html</guid>
      <description>Dev VM Content Connect to Windows VM (credentials are workshop/vFunction2021!)
Open Windows Explorer and see the folder structure under C:\vFunctionLab. Most of the work in the section is done in this folder as described here:
You should also see icons on the desktop for Chrome, Eclipse and Postman.
The folder c:\vFunctionLab\oms-tutorial\oms-services can be used as a reference to resolve any compilation or runtime issues encountered during this phase. You can compare your code with the code in that folder using WinDiff.</description>
    </item>
    
    <item>
      <title>Download service specs</title>
      <link>/200_refactoring-engine/210_servicecreation/2_download_service_specs.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/2_download_service_specs.html</guid>
      <description>Download the service specification files Open the Chrome web browser and go to the vFunction WebUI Analysis page. Select &amp;ldquo;Baseline 1&amp;rdquo; measurement (specified in the AO Tutorial)
Mark InventoryController, OrderController and ProductController for extraction in the ANALYSIS page by going through each one, clicking the menu near the number next to the name (3 dots) and selecting SAVE. A tick-mark on the sphere indicates it is marked for extraction. Note that the common library is marked for extraction too.</description>
    </item>
    
    <item>
      <title>Code extraction</title>
      <link>/200_refactoring-engine/210_servicecreation/3_code_copy.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/3_code_copy.html</guid>
      <description>Compile the original OMS application The code-copy application relies on the local maven repo to generate the required maven / gradle dependencies. To ensure the local repo is updated, compile the original application so the necessary used libraries will be downloaded from maven central.
Open a command prompt and cd to c:\vFunctionLab\oms-tutorial
Pull the latest version from the public git repository:
git pull Go to the application folder cd oms-webmvc Compile using maven: mvn clean install Extracting baseline code using code-copy You will now use the code-copy application, downloaded with the specification files, to create the baseline code for the extracted services.</description>
    </item>
    
    <item>
      <title>Common library</title>
      <link>/200_refactoring-engine/210_servicecreation/4_common_lib.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/4_common_lib.html</guid>
      <description>Building the Common Library The common library should compile without any changes.
Open the context menu of the common project in Eclipse, click Run As and select Maven install to compile.
The compilation should be successful.</description>
    </item>
    
    <item>
      <title>Config Data Source</title>
      <link>/200_refactoring-engine/210_servicecreation/5_db_config.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/5_db_config.html</guid>
      <description>Reconfiguring the services data source from Spring MVC to Spring Boot The original application is a Spring Web MVC application, using a MySQL database running in Tomcat via JNDI (Java Naming and Directory Interface). The configuration is specified in spring-config.xml (src/main/resources folder) of the original application.
To switch from the JNDI based Spring MVC configuration to the Spring Boot configuration, we will need to do three steps for each of the services:</description>
    </item>
    
    <item>
      <title>Order Controller</title>
      <link>/200_refactoring-engine/210_servicecreation/6_order_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/6_order_controller.html</guid>
      <description>Pasting double quotes to Eclipse Java editor may result in smart quotation causing compilation errors. In this case, you need to change them to neutral double quotes
Order Controller Go to the OrderController project in Eclipse, and configure the DB as described in section Config Data Source
Edit the class com.oms.ordercontroller.OrderControllerApp.java
Add the annotation @EntityScan(basePackages = { &amp;quot;com.oms.entity&amp;quot; }) (ensure the double quotes are copied correctly - see above note)</description>
    </item>
    
    <item>
      <title>Inventory Controller</title>
      <link>/200_refactoring-engine/210_servicecreation/7_inventory_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/7_inventory_controller.html</guid>
      <description>Inventory Controller InventoryController is similar to OrderController, but it uses Apache Geode, so we will need to use one of the profiles defined in the original application for that.
Go to the InventoryController project in your IDE, and perform the steps described in section Config Data Source
To set the service port (the default port 8080 has been taken by OrderController), open the application.properties file and add the property server.</description>
    </item>
    
    <item>
      <title>Product Controller</title>
      <link>/200_refactoring-engine/210_servicecreation/8_product_controller.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/8_product_controller.html</guid>
      <description>Product Controller ProductController calls InventoryController to support requests such as finding the inventory according to the product description. Here we will show how to refactor the code to support service to service calls.
Go to the ProductController project in Eclipse, and perform the steps described in section Config Data Source
To set the service port (the default port 8080 has been taken by OrderController), open the application.properties file and add the property server.</description>
    </item>
    
    <item>
      <title>Summary</title>
      <link>/200_refactoring-engine/210_servicecreation/9_summary.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/200_refactoring-engine/210_servicecreation/9_summary.html</guid>
      <description>Summary We demonstrated how vFunction simplifies and expedites extracting running independent services from the original application code into spring-boot services.
We started by downloading the specification files from vFunction.
Then we used code-copy to extract and build the common library as the infrastructure jar for the services.
We then described the details to extract, build, run and test three services: OrderController, InventoryController and ProductController. All three services share a MySQL DB.</description>
    </item>
    
  </channel>
</rss>
